
设计背景：
	实践“文件系统就是数据库”这样的真理。

数据库设计：
	数据库分四个部分：模板、房间、客户、全店配置。

		[HMDIR]
		├─skel/
		│	└skel_room.txt
		├─rooms/
		│	├[roomid]/
		│	│	├info
		│	│	├pictures/
		│	│	├history/
		│	│	└schedule/
		│	│		└[date]
		│	└[roomid]/
		│		├info
		│		├pictures/
		│		├history/
		│		└schedule/
		│			└[date]
		├─clients/
		│	├[UUID]
		│	└[UUID]
		└─config

	模板由hm init --skel 初始化一份。经过用户修改后，使用hm init [roomid]生成房间数据。

	保留客户信息主要是为了登记的时候可以避免重复输入。
	每一个客户都拥有多个引用方式。名字，名字的缩写（软件会自动查找能缩写为引用所指的全名），昵称，电话号码，身份ID，护照号码，等等。
	凡是可以唯一确定客户身份的都可以被用作引用。这么做的目的是为了命令行方式下能进行快速输入。就算引用有歧义，程序也会尽量猜测并一猜测结果作为消歧义列表中的地一个。
	客户信息使用标准的key=val形式。还有经过base64编码的证件扫描信息。注：首先经过cpio打包后再进行base64编码。所以可以包含多个图片。
	用久了客户信息难免会出现重复（重复添加已经存在的客户）的情况，hm会在后台自动判断是否执行gc操作。
	启动gc操作的时候，扫描所有的客户信息，合并相同的客户并更新所有数据库中的引用（sed）。
	有时候只是客户信息的更新，但是由于不知情的情况下采取了添加的办法，这种情况下会存在同一客户的两份不同的信息。
	gc也能在操作员的指导下进行这种合并。
	文件名为UUID。房间登记记录里用到的就是UUID作为引用。如果遇到合并，会更新所有的引用。

	房间数据由hm init命令生成。包括房间的历史登记信息和未来的预订安排。
	房间信息依然使用标准的key=val形式。	保存在以房间名为文件夹下的info文件中。
	子文件夹pictures保存的是房间的照片。希望加入GUI界面后能动态展示这些图片。
	历史登记信息保存在history文件夹中，以入住日期为文件名。
	预订信息保存在schedule文件夹中，以入住日期为文件名。注：连续入住实际上是会生成多个文件。
	hm虽然不是持久运行的软件，但是每次执行hm命令的时候，hm会在后台自动判断是否执行gc操作。
	执行gc操作的时候就会扫描所有房间，将schedule过期的预订转入history文件夹。
	并没有current，因为hm是一次执行的软件，current是一个遥远的存在。

	全店配置保持在config文件中。
	记录的是
		店名（包括英文名，还有网址），店长。
		结算时间（通常12:00之后退房就多算半天。也有的是12：30诸如此类的。这个时间就可以配置）
		是否自动退房
		是否强制操作签名

操作设计：
	日常操作以接受预订和查询空余房间为主。
	有时候还需要简单的“预订”任意房间。
	使用命令 hm book 进行预订。
	提供登记服务。hm checkin X, X 可以是房间号，客户的引用（参考上文）。
	hm checkin会提示具体的房间号，预计到店时间，详细客户信息等等，然后提示  Y/N ，操作员核对后回答 Y 就可以完成到店登记。
	如果没有预订，直接执行 hm checkin 会提示无预订。提问是否立即模式，回答问题后即可一步一步完成操作。

	hm autocheckin 是个帮助，可以将到预定时间的所有顾客设定为已经入住。对于只做预订操作的接待小姐非常有用的功能。

房间记录数据细节设计：
	文件名为入住日期。格式：

	#入住客户
	clients=UUID with ， seperated
	#预订者
	booker=UUID
	#(预计)到达时间，时间格式为标准ctime输出格式。本地时间。
	arrival=
	#(预计)离开时间，时间格式为标准ctime输出格式。本地时间。
	leave=
	#操作员
	operator=
	#特殊服务。比如预订晚餐。special由hm的第三方命令提供具体解析。
	special=

网络共享：
	如果想要多人操作，共享一份数据库，也是可以的。hm提供一个daemon供 GUI 使用。
	GUI不论是网络模式还是本地模式都通过次daemon的RPC使用。所以GUI版本将具备天然的网络性。









